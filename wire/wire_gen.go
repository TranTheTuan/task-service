// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	repository2 "github.com/TranTheTuan/task-service/app/domain/repository"
	"github.com/TranTheTuan/task-service/app/domain/service"
	"github.com/TranTheTuan/task-service/app/domain/usecase"
	"github.com/TranTheTuan/task-service/app/infrastructure/grpc"
	"github.com/TranTheTuan/task-service/app/infrastructure/grpc/client"
	"github.com/TranTheTuan/task-service/app/infrastructure/repository"
	"github.com/google/wire"
	"github.com/jinzhu/gorm"
)

// Injectors from task_service_server.go:

func InitTaskServiceServer(orm *gorm.DB) *grpc.TaskServiceServer {
	taskRepository := repository.NewTaskRepository(orm)
	taskService := service.NewTaskService(taskRepository)
	taskUsecase := usecase.NewTaskUsecase(taskService)
	taskServiceServer := grpc.NewTaskServiceServer(taskUsecase)
	return taskServiceServer
}

// Injectors from wire.go:

func InitAuthUsecase(authGrpcAddr string) (*usecase.AuthUsecase, error) {
	authClient, err := client.NewAuthClient(authGrpcAddr)
	if err != nil {
		return nil, err
	}
	authUsecase := usecase.NewAuthUsecase(authClient)
	return authUsecase, nil
}

// task_service_server.go:

var (
	TaskRepoBind    = wire.Bind(new(repository2.TaskRepositoryInterface), new(*repository.TaskRepository))
	TaskServiceBind = wire.Bind(new(service.TaskServiceInterface), new(*service.TaskService))
	TaskUsecaseBind = wire.Bind(new(usecase.TaskUsecaseInterface), new(*usecase.TaskUsecase))

	providerSet = wire.NewSet(repository.NewTaskRepository, service.NewTaskService, usecase.NewTaskUsecase, grpc.NewTaskServiceServer)
)
