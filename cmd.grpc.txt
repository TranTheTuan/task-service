import (
    grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	grpc_auth "github.com/grpc-ecosystem/go-grpc-middleware/auth"
	grpc_logrus "github.com/grpc-ecosystem/go-grpc-middleware/logging/logrus"
	grpc_recovery "github.com/grpc-ecosystem/go-grpc-middleware/recovery"
	grpc_validator "github.com/grpc-ecosystem/go-grpc-middleware/validator"

    "google.golang.org/grpc"
)

    clientCredentialsGRPCServer := appService.NewClientCredentialAPIServer(oauth2Server)

    grpcServer := grpc.NewServer(
		grpc.StreamInterceptor(grpc_middleware.ChainStreamServer(
			grpc_logrus.StreamServerInterceptor(entry),
			grpc_auth.StreamServerInterceptor(authUC.AuthHandler),
			grpc_validator.StreamServerInterceptor(),
			grpc_recovery.StreamServerInterceptor(),
		)),
		grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(
			grpc_logrus.UnaryServerInterceptor(entry),
			grpc_auth.UnaryServerInterceptor(authUC.AuthHandler),
			grpc_validator.UnaryServerInterceptor(),
			grpc_recovery.UnaryServerInterceptor(),
		)),
	)

    polar_bear.RegisterClientCredentialAPIServer(grpcServer, clientCredentialsGRPCServer)

	grpcAddr := viper.GetString(SystemGrpcAddr)
	lis, err := net.Listen("tcp", grpcAddr)
	if err != nil {
		panic(err)
	}

    go func() {
		err = grpcServer.Serve(lis)
		defer func() {
			err := lis.Close()
			if err != nil {
				smart_log.Logger.WithFields(log.Fields{
					"service": "polar-bear",
					"type":    "grpc",
					"addr":    grpcAddr,
				}).WithError(err).Error("close net listener failed")
			}
		}()
		if err != nil {
			panic(err)
		}
	}()